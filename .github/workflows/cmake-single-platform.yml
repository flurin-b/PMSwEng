# This Workflow builds and tests the project and commits the build output to the main branch on push.
name: CMake single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

defaults:
  run:
    shell: cmd

env:
  BUILD_TYPE: Release
#  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }
  CI_COMMIT_MESSAGE: Continuous Integration Build Artifacts
  CI_COMMIT_AUTHOR: Continuous Integration

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install Qt
      # Installs Qt
      uses: jurplel/install-qt-action@v3
      with:
        host: 'windows'
        target: 'desktop'
        install-deps: 'true'
        set-env: 'true'
        tools-only: 'false'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        [ -d ${{github.workspace}}/PacMan/build/] && git rm -r ${{github.workspace}}/PacMan/build
        cmake ${{github.workspace}}/PacMan/CMakeLists.txt -B ${{github.workspace}}/PacMan/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: |
        cd ${{github.workspace}}/PacMan/
        cmake --build ${{github.workspace}}/PacMan/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/PacMan/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

# Commit and push all changed files.
    - name: GIT Commit Build Artifacts
      # Only run on main branch push (e.g. after pull request merge).
      if: github.event_name == 'push'
      run: |
        git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
        git config --global user.email "username@users.noreply.github.com"
        git add PacMan/build/
        git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
        git push
